agent 启动过程

（1）调用 worker.Init 初始化worker
（2）创建StatusReporter。赋值给 reporter。

（3）调用 a.worker.Listen(ctx, reporter)
       // Listen to updates about tasks controlled by the worker. When first
        // called, the reporter will receive all updates for all tasks controlled
        // by the worker.
（4）for select 监听session ，
如果是session.tasks，收到leader发送的tasks请求，触发worker执行 Assign动作。
a.worker.Assign(ctx, msg.Tasks)

Assign task
// Assign the set of tasks to the worker. Any tasks not previously known will
// be started. Any tasks that are in the task set and already running will be
// updated, if possible. Any tasks currently running on the
// worker outside the task set will be terminated

1、 遍历msg.tasks， 
PutTask----将新任务保存到本地数据库中，如果存在则返回已有的task。
2、 SetTaskAssignment 设置task 为Assigned ，并写到数据库中。
3、w.taskManagers[task.ID] 检查taskmanager是否已经创建，如果已经创建则调用tm.Update更新即可。
taskmanager 携程一直在监听tm.updateq状态。
mgr.Update(ctx, task)
// Update the task data.
func (tm *taskManager) Update(ctx context.Context, task *api.Task) error {
        select {
        case tm.updateq <- task:
                return nil
        case <-tm.closed:
                return ErrClosed
        case <-ctx.Done():
                return ctx.Err()
        }
}

如果 针对task的taskmanager不存在，则

（1）先获取本次数据库中task的状态，如果获取本地数据库task状态出错，则将leader传递的task的状态写入到
本地数据库中。如果没有出错，则把数据库中task的状态 赋值给leader传递的task。
（2）调用 startTask创建 taskmanager。
（3）执行 assigned[task.ID] = struct{}{}
（4）遍历w.taskManager，针对不在assigned[]中的task，
调用SetTaskAssignment设置task assign为false。
调用delete(w.taskManagers, id)
close taskManger。










agent端
 worker 初始化-->
 从数据库中读取所有的task，（本地tasks.db）
 
 检查该任务是否已经 assign（数据库记录），如果没有，表示该agent还没有分配task，则从数据库中删除该任务。
 
 从数据库获取task的状态，获取出错则退出
 
 调用startTask 创建taskmanager，并且更新 w.taskManagers[task.ID]。
  
 newTaskManager 创建过程：
 
  （1）ctlr, status, err := exec.Resolve(ctx, task, w.executor)
  获取 task的 status.state。
  如果 期望状态与实际状态不一样，会打印信息。
  
  （2）updateTaskStatus
  updateTaskStatus reports statuses to listeners, read lock must be held
  
  1、 调用 PutTaskStatus 更新状态到本地数据库。
  2、调用
key.StatusReporter.UpdateTaskStatus(ctx, taskID, status)更新状态
此处UpdateTaskStatus 其实就是agent.go文件中的 func (a *Agent) UpdateTaskStatus(ctx context.Context, taskID string, status *api.TaskStatus)

通过session 发送给leader。

（3）调用newTaskManager 创建taskManager，接下来调用tm.run,继续调用exec.Do 执行实际的动作。
newTaskManager(ctx, task, ctlr, statusReporterFunc(func(ctx context.Context, taskID string, status *api.TaskStatus) error {
                w.mu.RLock()
                defer w.mu.RUnlock()

                return w.db.Update(func(tx *bolt.Tx) error {
                        return w.updateTaskStatus(ctx, tx, taskID, status)
                })
        })
exec.Do 返回后会执行	tm.reporter.UpdateTaskStatus 更新task 状态。	
status, err := exec.Do(opctx, running, tm.ctlr)
                                if status != nil {
                                        // always report the status if we get one back. This
                                        // returns to the manager loop, then reports the status
                                        // upstream.
                                        select {
                                        case statusqLocal <- status:
                                        case <-ctx.Done(): // not opctx, since that may have been cancelled.
                                        }

                                        if err := tm.reporter.UpdateTaskStatus(ctx, running.ID, status); err != nil {
                                                log.G(ctx).WithError(err).Error("failed reporting status to agent")
                                        }
                                }

此处设置statusqLocal 为返回的status。
立即触发             case status := <-statusq:
                        tm.task.Status = *status----更新taskmanager中task的状态。
